@startuml

abstract class Tecton {
    - breakChance: double
    - breakCount: int
    - hexagons: List<Hexagon>
    - neighbours: List<Tecton>
    - fungus: Fungus
    - insects: List<Insect>
    - spores: Map<Mycologist, Integer>
    - hyphas: List<Mychologist>
    + addSpores(Mycologist)
    + removeSpores(Mycologist)
    + addHypha(Hypha)
    + split(double): List<Tecton>
    + isNeighbor(Tecton): boolean
    + hasHypha(Tecton): boolean
    + hasSpores(Mycologist): boolean
    + setFungus(Fungus)
    # handleHypha(Hypha)
    + hyphaDecay(): void
    + eatInsect(): boolean
}

class SingleHyphaTecton extends Tecton{
    - hyphaLimit: int = 1
}
class InfiniteHyphaTecton  extends Tecton{
    - hyphaLimit: int = -1
    - hyphas: List<hypha>
}
class ShortHyphaTecton  extends Tecton{
    - hyphaLifespan: int = 4
    + decreaseLifespan(): void 
}
class KeepHyphaTecton extends Tecton{ 
    - hyphaLifespan: int = -1
}
class NoFungiTecton extends Tecton{
    - fungus: Fungus = null
}


abstract class Spore {
    - species: Mycologist
    - effectDuration: int
    - nutrientValue: int
    + getEffectDuration(): int
    + getNutrientValue(): int
    + decreaseEffectDuration()
    + applyTo(Insect)
}

class StunningEffect extends Spore
class SlowingEffect extends Spore
class SporeNoEffect extends Spore
class ParalyzingEffect extends Spore
class AcceleratingEffect extends Spore
class CloneEffect extends Spore

@enduml